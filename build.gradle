buildscript {
    ext {
        springBootVersion = '2.0.6.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
        classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.moowork.node"

group = 'myks790'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation('org.springframework.boot:spring-boot-starter-web')
    runtime('org.springframework.boot:spring-boot-devtools')
    compileOnly('org.projectlombok:lombok')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.mariadb.jdbc:mariadb-java-client:2.3.0')
    implementation('ch.qos.logback:logback-core:1.2.3')
    implementation('ch.qos.logback:logback-classic:1.2.3')
    implementation('org.springframework.boot:spring-boot-starter-cache')
    implementation('org.ehcache:ehcache:3.6.1')
    implementation('javax.cache:cache-api:1.1.0')
}

node {
    version = '10.7.0'
    npmVersion = '6.4.1'
    download = true
}

task webpack(type: NodeTask, dependsOn: 'npmInstall') {
    args = ["-p"]
    script = project.file('node_modules/.bin/webpack')
}

bootRun {
    sourceResources sourceSets.main
    systemProperties System.properties
}

test {
    exclude '**/*'
}


apply plugin: 'com.palantir.docker'

bootJar {
    baseName = 'my-home-docker'
    version =  '0.0.1'
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}
docker {
    name "${project.group}/${bootJar.baseName}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}